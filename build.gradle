// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id("com.android.application") version "8.8.2" apply false
    id("com.android.library") version "8.8.2" apply false
    id("org.jetbrains.kotlin.android") version "2.1.0" apply false
    id("dev.rikka.tools.refine") version "4.4.0" apply false
    id("org.jetbrains.kotlin.plugin.serialization") version "2.1.0" apply false
}

apply from: "manifest.gradle"

/**
 * Note: To configure GitHub credentials, you have to generate an access token with at least
 * `read:packages` scope at https://github.com/settings/tokens/new and then
 * add it to any of the following:
 * <ul>
 *      <li>Add `githubUsername` and `githubAccessToken` to Global Gradle Properties</li>
 *      <li>Set `GITHUB_USERNAME` and `GITHUB_ACCESS_TOKEN` in your environment variables</li>
 *      <li>Create a `github.properties` file in your project folder with the following content:</li>
 * </ul>
 *
 * <pre>
 *   githubUsername=&lt;YOUR_GITHUB_USERNAME&gt;
 *   githubAccessToken=&lt;YOUR_GITHUB_ACCESS_TOKEN&gt;
 * </pre>
 */
def githubProperties = new Properties().with {
    def file = this.rootProject?.file("github.properties")
    if (file?.exists()) file.withInputStream { load(it) }
    it
}
def githubUsername = githubProperties.getProperty("githubUsername") // github.properties file
        ?: rootProject.findProperty("githubUsername") // Global Gradle Properties
        ?: System.getenv("GITHUB_USERNAME") // Environment variable
        ?: { throw new GradleException("GitHub username not found") }()

def githubAccessToken = githubProperties.getProperty("githubAccessToken") // github.properties file
        ?: rootProject.findProperty("githubAccessToken") // Global Gradle Properties
        ?: System.getenv("GITHUB_ACCESS_TOKEN") // Environment variable
        ?: { throw new GradleException("GitHub access token not found") }()


allprojects {
    repositories {
        google()
        mavenLocal()
        mavenCentral()
        maven { url = uri("https://jitpack.io") }
        maven {
            url = uri("https://maven.pkg.github.com/tribalfs/sesl-androidx")
            credentials {
                username = githubUsername
                password = githubAccessToken
            }
        }
        maven {
            url = uri("https://maven.pkg.github.com/tribalfs/sesl-material-components-android")
            credentials {
                username = githubUsername
                password = githubAccessToken
            }
        }
        maven {
            url = uri("https://maven.pkg.github.com/tribalfs/oneui-design")
            credentials {
                username = githubUsername
                password = githubAccessToken
            }
        }
    }

    tasks.withType(Javadoc).tap {
        configureEach {
            options.addStringOption("Xdoclint:none", "-quiet")
            options.addStringOption("encoding", "UTF-8")
            options.addStringOption("charSet", "UTF-8")
        }
    }
}

def group = "io.github.tribalfs"

subprojects {
    plugins.withId("com.android.base") {
        plugins.apply('dev.rikka.tools.refine')
    }

    plugins.whenPluginAdded { plugin ->
        def isAndroidLibrary = "com.android.build.gradle.LibraryPlugin" == plugin.class.name
        def isAndroidApp = "com.android.build.gradle.AppPlugin" == plugin.class.name

        if (isAndroidLibrary || isAndroidApp) {
            def artifact = project.name
            def version_info = rootProject.ext.versions_metadata[artifact]

            android {
                if (version_info != null) {
                    defaultConfig.versionName = version_info[0]
                    compileSdk = version_info[2]
                    defaultConfig.minSdk = version_info[1]
                    defaultConfig.targetSdk = version_info[2]
                }

                publishing {
                    singleVariant("release") {
                        withSourcesJar()
                        withJavadocJar()
                    }
                }
            }


            if (isAndroidApp) {
                android.defaultConfig {
                    buildConfigField "String", "ONEUI_DESIGN_VERSION", "\"${version_info[0]}\""
                }
            }

            afterEvaluate {
                if (!plugins.hasPlugin("maven-publish")) {
                    return
                }

                if (artifact == "oneui-design" || artifact == "oneui-icons") {
                    def readmeFile = file("${rootProject.projectDir}/README.md")
                    def readmeContent = new String(readmeFile.bytes)
                    def newVersionString = "$group:$artifact:${android.defaultConfig.versionName}"
                    def oneuiVersion = (android.defaultConfig.versionName =~ /oneui\d+/)[0]
                    def pattern = ~/io\.github\.tribalfs:$artifact:\S+$oneuiVersion/
                    new File(readmeFile.path).text = readmeContent.replaceAll(pattern, newVersionString)
                    println "Updated README.md with version: $newVersionString"
                }

                publishing {
                    publications {
                        mavenJava(MavenPublication) {
                            version = android.defaultConfig.versionName
                            groupId = group
                            artifactId = artifact
                            afterEvaluate {
                                from components.release
                            }

                            pom {
                                name = artifact
                                url = "https://github.com/tribalfs/oneui-design"
                                developers {
                                    developer {
                                        id = "tribalfs"
                                        name = "Tribalfs"
                                        email = "tribalfs@gmail.com"
                                        url = "https://github.com/tribalfs"
                                    }
                                }

                                licenses {
                                    license {
                                        name = "MIT License"
                                        url = "https://github.com/tribalfs/oneui-design/blob/main/LICENSE"
                                        distribution = "repo"
                                    }
                                }
                            }
                        }
                    }

                    repositories {
                        maven {
                            name = "GitHubPackages"
                            url = uri("https://maven.pkg.github.com/tribalfs/oneui-design")
                            credentials {
                                username = githubUsername
                                password = githubAccessToken
                            }
                        }
                    }
                }
            }
        }
    }
}

tasks.register("clean", Delete) {
    delete rootProject.layout.buildDirectory
}
