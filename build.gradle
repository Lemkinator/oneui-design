// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    apply from: "manifest.gradle"

    repositories {
        google()
        mavenCentral()
        maven { url = uri("https://jitpack.io") }
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:2.0.21")
        classpath('com.android.tools.build:gradle:8.7.3')
    }
}


/**
 * Note: To configure GitHub credentials, you have to generate an access token with at least
 * `read:packages` scope at https://github.com/settings/tokens/new and then
 * add it to any of the following:
 * <ul>
 *      <li>Add `githubUsername` and `githubAccessToken` to Global Gradle Properties</li>
 *      <li>Set `GITHUB_USERNAME` and `GITHUB_ACCESS_TOKEN` in your environment variables</li>
 *      <li>Create a `github.properties` file in your project folder with the following content:</li>
 * </ul>
 *
 * <pre>
 *   githubUsername=&lt;YOUR_GITHUB_USERNAME&gt;
 *   githubAccessToken=&lt;YOUR_GITHUB_ACCESS_TOKEN&gt;
 * </pre>
 */
def githubProperties = new Properties().with {
    def file = this.rootProject?.file("github.properties")
    if (file?.exists()) file.withInputStream { load(it) }
    it
}
def githubUsername = githubProperties.getProperty("githubUsername") // github.properties file
        ?: rootProject.findProperty("githubUsername") // Global Gradle Properties
        ?: System.getenv("GITHUB_USERNAME") // Environment variable
        ?: { throw new GradleException("GitHub username not found") }()

def githubAccessToken = githubProperties.getProperty("githubAccessToken") // github.properties file
        ?: rootProject.findProperty("githubAccessToken") // Global Gradle Properties
        ?: System.getenv("GITHUB_ACCESS_TOKEN") // Environment variable
        ?: { throw new GradleException("GitHub access token not found") }()


allprojects {
    repositories {
        google()
        mavenLocal()
        mavenCentral()
        maven { url = uri("https://jitpack.io") }
        maven {
            url = uri("https://maven.pkg.github.com/tribalfs/sesl-androidx")
            credentials {
                username = githubUsername
                password = githubAccessToken
            }
        }
        maven {
            url = uri("https://maven.pkg.github.com/tribalfs/sesl-material-components-android")
            credentials {
                username = githubUsername
                password = githubAccessToken
            }
        }
        maven {
            url = uri("https://maven.pkg.github.com/tribalfs/oneui-design")
            credentials {
                username = githubUsername
                password = githubAccessToken
            }
        }
    }

    tasks.withType(Javadoc).tap {
        configureEach {
            options.addStringOption("Xdoclint:none", "-quiet")
            options.addStringOption("encoding", "UTF-8")
            options.addStringOption("charSet", "UTF-8")
        }
    }
}

def groupId = "io.github.tribalfs"
def artifact = "oneui-design"

subprojects {
    afterEvaluate { project ->
        if (!plugins.hasPlugin("maven-publish")) {
            return
        }

        group = groupId
        version = android.defaultConfig.versionName

        def readmeFile = file("${rootProject.projectDir}/README.md")
        def readmeContent = new String(readmeFile.bytes)
        def newVersionString = "$groupId:$artifact:$version"
        def pattern = ~/io\.github\.tribalfs:oneui-design:\S+oneui\d/
        new File(readmeFile.path).text = readmeContent.replaceAll(pattern, newVersionString)
        println "Updated README.md with version: $newVersionString"

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifactId = artifact
                    afterEvaluate {
                        from components.release
                    }
                }
            }

            repositories {
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/tribalfs/oneui-design")
                    credentials {
                        username = githubUsername
                        password = githubAccessToken
                    }
                }
            }
        }
    }
}

tasks.register("clean", Delete) {
    delete rootProject.layout.buildDirectory
}
